version: "3.9" #version del docker-compose

services:
  search-flight:
    build: ./services/search-flight #carpeta donde se encuentra el Dockerfile
    container_name: search_flight #nombre del contenedor
    ports:
      - "4000:4000" #puerto del contenedor
    networks:
      - backend #red a la que pertenece el contenedor

  scraper-flight1:
    build: ./services/scraper-flight1
    container_name: scraper_flight1
    ports:
      - "4002:4002"
    networks:
      - backend

  scraper-flight2:
    build: ./services/scraper-flight2
    container_name: scraper_flight2
    ports:
      - "4003:4003"
    networks:
      - backend


  postgres:
    image: postgres:17
    environment:
      POSTGRES_DB: flight_cache
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend


  flight-cache:
    build: ./services/flight-cache
    container_name: flight-cache
    ports:
      - "4004:4004"
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: flight_cache
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    depends_on:
      - postgres
    networks:
      - backend


  api-gateway:
    build: ./services/api-gateway
    container_name: api_gateway
    ports:
      - "3001:3001"
    environment: # Variables de entorno para la configuración del API Gateway
      - CACHE_URL=http://flight-cache:4004 # URL del servicio de caché
      - SEARCH_URL=http://search-flight:4000 # URL del servicio de búsqueda
      - SCRAPER1_URL=http://scraper-flight1:4002 # URL del primer scraper
      - SCRAPER2_URL=http://scraper-flight2:4003 # URL del segundo scraper
    depends_on: # Dependencias del API Gateway
      - search-flight 
      - scraper-flight1
      - scraper-flight2
      - flight-cache
    networks:
      - backend

  frontend: # El frontend está también en la red backend para poder llamar a http://api-gateway:3001.
    build: ./frontend 
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - backend
  
volumes:
  postgres_data:  

networks:
  backend:
    driver: bridge # Define la red backend como una red puente para que todos los servicios puedan verse por nombre.